{
  "name": "Instant-webview",
  "tagline": "Instant WebView is a web browser which has no UI controls",
  "body": "# Introduction\r\n\r\n[![Build Status](https://travis-ci.org/gustavosbarreto/instant-webview.svg?branch=master)](https://travis-ci.org/gustavosbarreto/instant-webview)\r\n\r\nInstant WebView is a web browser which has no UI controls. You can interact with\r\nthem through inter-process communication (IPC).\r\n\r\nCurrently, we support the following IPC transport layers:\r\n\r\n* TCP\r\n* Unix Socket\r\n* WebSocket\r\n\r\nYou can implement another IPC transport layer inheriting the\r\n`IpcTransportLayer` abstract class. See the existing IPC transport\r\nimplementations to get some clue.\r\n\r\n# Use Cases\r\n\r\n* Web testing\r\n  - Browser automated testing done easy.\r\n* Page automation\r\n  - Access and manipulate web pages using DOM API.\r\n* Digital Signage\r\n  - Display Web content without distractions.\r\n* Kiosk Web Browser\r\n  - The users can only interact with a single web application.\r\n\r\n# Reverse IPC\r\n\r\nWith reverse IPC, the Instant WebView accept commands from remote IPC server\r\ninstead of accepting commands from IPC clients. This is useful for controlling\r\nthe browser remotely. To enable reverse IPC pass `\"--reverse\"` in the cmdline.\r\n\r\n# Building\r\n\r\nBefore building Instant WebView you need GCC 6, Qt and QtWebEngine 5.6 installed on the system.\r\n\r\n```\r\n$ qmake PREFIX=/usr\r\n$ make\r\n$ make install\r\n```\r\n\r\n# Running\r\n\r\nTo run Instant WebView you need to choose which IPC transport layer should be used\r\nby IPC mechanism, use the `--transport` option to that.\r\n\r\nExample:\r\n\r\n```\r\n$ instant-webview --transport unixsocket\r\n$ echo -e \"open maximized\\nload http://google.com\" | nc -U /tmp/instant-webview\r\n```\r\n\r\n# Commands\r\n\r\nInstant WebView will read commands via TCP, Unix Socket or WebSocket. Each command starts\r\nwith the name of a command and is terminated by a newline. Empty line are interpreted\r\nas end of connection.\r\n\r\nIf the command starts with `@` the command is marked as single-shot.\r\n\r\n## Single-shot commands\r\n\r\nSingle-shot commands might be used to wait until command response is received.\r\nIt might be useful to get data from the Instant WebView using the netcat utility.\r\n\r\nExample:\r\n\r\n```sh\r\nURL=$(echo \"@current_url\" | nc -q -1 -U /tmp/instant-webview)\r\necho \"The current URL is $URL\"\r\n```\r\n\r\nIn the below example the command ```@current_url``` is sent and the netcat waits\r\nforever for the response. After response is received, the connection is closed.\r\n\r\n## Command response\r\n\r\nThe response of a command may vary according the type of command. If the command is\r\nmarked as single-shot, the response only contains the returned data from the command,\r\notherwise it is not a single-shot command, the response is composed of the command\r\nname and returned data, separated by space.\r\n\r\n**Note that not all commands have a response.**\r\n\r\n## Navigation\r\n\r\n* `load <URL>`\r\n  - Loads the specified `URL`.\r\n\r\n* `stop`\r\n  - Stops loading the document.\r\n\r\n* `reload`\r\n  - Reloads the current document.\r\n\r\n* `back`\r\n  - Loads the previous document in the list of documents built by navigating links.\r\n\r\n* `forward`\r\n  - Loads the next document in the list of documents built by navigating links.\r\n\r\n## Window\r\n\r\n* `open <maximized|fullscreen>`\r\n  - Open the window. If `maximized` is given, the window is open in maximized\r\n    state, otherwise `fullscreen` is given, the window is open in fullscreen mode.\r\n\r\n* `close`\r\n  - Closes the window.\r\n\r\n## Page\r\n\r\n* `current_url`\r\n  - Returns the URL of the web page currently viewed.\r\n* `current_title`\r\n  - Returns the title of the web page currently viewed.\r\n* `screenshot [REGION]`\r\n  - Take a screenshot of the web page currenly viewed and send base64 encoded JPG.\r\n    If `[REGION]` is given, restrict the screenshot by the given region `(x,y,width,height)`.\r\n\r\n## Content\r\n\r\n* `set_html <string|file> <VALUE>`\r\n  - Sets the content of the web page. If `file` is given, the `VALUE`\r\n    is interpreted as a path to a file to load, otherwise `string` is given,\r\n    the `VALUE` is used to set the content of the web page.\r\n\r\n* `js <string|file> <VALUE>`\r\n  - Run JavaScript code. If `file` is given, the `VALUE` is interpreted as\r\n    a path to a file to load, otherwise `string` is given, the value `VALUE`\r\n    is executed as JavaScript code.\r\n\r\n## Events\r\n\r\n* `subscribe <VALUE>`\r\n  - Subscribe to specified event in `VALUE`.\r\n\r\n### Available events\r\n\r\n* `url_changed`\r\n  - This event is fired when the url chages.\r\n* `title_changed`\r\n  - This event is fired whenever the title changes.\r\n* `load_started`\r\n  - This event is fired when a page starts loading content.\r\n* `load_finished`\r\n  - This event is fired when a load of the page has finished.\r\n\r\n# Examples\r\n\r\n**Basic Example**\r\n\r\nOpen a maximized window and load google.com:\r\n\r\n```sh\r\necho \"open maximized\" | nc -U /tmp/instant-webview\r\necho \"load http://google.com\" | nc -U /tmp/instant-webview\r\n```\r\n\r\n**Screenshot Example**\r\n\r\nOpen a maximized window, load google.com and wait until load is finished\r\nto take a screenshot:\r\n\r\n```sh\r\necho \"open maximized\" | nc -U /tmp/instant-webview\r\necho -e \"@subscribe load_finished\\nload http://google.com\" | nc -q -1 -U /tmp/instant-webview\r\necho -e \"@screenshot\" | nc -q -1 -U /tmp/instant-webview | base64 --decode > screenshot.jpg\r\n```\r\n\r\n**Browser History Example**\r\n\r\nOpen a maximized window, subscribe to url_changed event, wait until it\r\nis fired then append the URL to /tmp/history.txt:\r\n\r\n```sh\r\necho \"open maximized\" | nc -U /tmp/instant-webview\r\nwhile true; do\r\n  URL=$(echo -e \"@subscribe url_changed\" | nc -q -1 -U /tmp/instant-webview)\r\n  echo \"$URL\" >> /tmp/history.txt\r\ndone\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}