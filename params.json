{
  "name": "Instant-webview",
  "tagline": "Instant WebView is a web browser which has no UI controls",
  "body": "# Introduction\r\n\r\n[![Build Status](https://travis-ci.org/gustavosbarreto/instant-webview.svg?branch=master)](https://travis-ci.org/gustavosbarreto/instant-webview)\r\n\r\nInstant WebView is a scriptable WebView for developers.\r\n\r\nThe WebView uses the QtWebEngine (which is based on Chromium) to render the HTML\r\ncontent. There is also a simple protocol to get data, send commands and\r\nlisten for events: through Unix Socket, TCP or WebSocket. The window of WebView\r\ndoes not have any UI component what you see in a standard web browser like an\r\naddress bar, status bar, navigation buttons, etc.\r\n\r\n# Use Cases\r\n\r\n* Web testing\r\n  - Browser automated testing done easy.\r\n* Page automation\r\n  - Access and manipulate web pages using DOM API.\r\n* Digital Signage\r\n  - Display Web content without distractions.\r\n* Kiosk Web Browser\r\n  - The users can only interact with a single web application.\r\n\r\n# Building\r\n\r\nBefore building Instant WebView you need to install GCC 6, Qt and QtWebEngine 5.6 on the system.\r\n\r\n```sh\r\nqmake PREFIX=/usr\r\nmake\r\nmake install\r\n```\r\n\r\n# Usage\r\n\r\n### instant-webview\r\n\r\nThe WebView itself.\r\n\r\n```\r\nUsage: instant-webview [options]\r\nInstant WebView is a scriptable WebView for developers.\r\n\r\nOptions:\r\n  -h, --help                                  Displays this help.\r\n  -v, --version                               Displays version information.\r\n  -t, --transport <tcp|unixsocket|websocket>  IPC Transport Layer to use.\r\n  -r, --reverse <ID>                          Enable reverse mode. The ID is\r\n                                              used to identify your session in\r\n                                              the server.\r\n  -s, --script <path>                         Script to run.\r\n```\r\n\r\n**Example:**\r\n\r\n```sh\r\ninstant-webview -t unixsocket:/tmp/instant-webview\r\n```\r\n\r\n### instant-webview-ctl\r\n\r\nA utility to interact with the WebView.\r\n\r\n```\r\nUsage: instant-webview-ctl [options] command\r\nInstant WebView is a scriptable WebView for developers.\r\n\r\nOptions:\r\n  -h, --help                                  Displays this help.\r\n  -v, --version                               Displays version information.\r\n  -t, --transport <tcp|unixsocket|websocket>  IPC Transport Layer to use.\r\n\r\nArguments:\r\n  command                                     Command to execute. Pass \"-\" to\r\n                                              read from stdin.\r\n```\r\n\r\n**Example:**\r\n\r\n```sh\r\necho \"open maximized\" | instant-webview-ctl -t unixsocket:/tmp/instant-webview -\r\n```\r\n\r\n# Commands\r\n\r\nInstant WebView reads commands from TCP, Unix Socket or WebSocket. Each command starts\r\nwith the name of a command and is terminated by a newline. Empty line are interpreted\r\nas end of connection.\r\n\r\nIf the command starts with `@` the command is marked as single-shot.\r\n\r\nDue to the simplicity of the protocol, it is possible to interact with the WebView\r\nusing the command-line utility GNU Netcat. However, there is `instant-webview-ctl`\r\nutility that can be used to interact with the WebView, so you don't need extra\r\ntools to interact with the WebView.\r\n\r\nSimple example using the GNU Netcat utility to demonstrate how simple is the protocol:\r\n\r\n```sh\r\necho \"open maximized\" | nc -U /tmp/instant-webview\r\necho \"load http://google.com\" | nc -U /tmp/instant-webview\r\n```\r\n\r\nIn the below example a maximized window is open and the http://google.com is loaded.\r\n\r\n## Single-shot commands\r\n\r\nSingle-shot commands might be used to wait until command response is received.\r\nIt might be useful to get data from the WebView using both `instant-webview-ctl`\r\nand GNU Netcat utility.\r\n\r\n```sh\r\nURL=$(echo \"@current_url\" | instant-webview-ctl -t unixsocket:/tmp/instant-webview)\r\necho \"The current URL is $URL\"\r\n```\r\n\r\n## Command response\r\n\r\nThe response of a command may vary according the type of command. If the command is\r\nmarked as single-shot, the response only contains the returned data from the command,\r\notherwise it is not a single-shot command, the response is composed of the command\r\nname and returned data, separated by space.\r\n\r\n**Note that not all commands have a response.**\r\n\r\n## Navigation\r\n\r\n* `load <URL>`\r\n  - Loads the specified `URL`.\r\n\r\n* `stop`\r\n  - Stops loading the document.\r\n\r\n* `reload`\r\n  - Reloads the current document.\r\n\r\n* `back`\r\n  - Loads the previous document in the list of documents built by navigating links.\r\n\r\n* `forward`\r\n  - Loads the next document in the list of documents built by navigating links.\r\n\r\n## Window\r\n\r\n* `open <maximized|fullscreen>`\r\n  - Open the window. If `maximized` is given, the window is open in maximized\r\n    state, otherwise `fullscreen` is given, the window is open in fullscreen mode.\r\n\r\n* `close`\r\n  - Closes the window.\r\n\r\n## Page\r\n\r\n* `current_url`\r\n  - Returns the URL of the web page currently viewed.\r\n* `current_title`\r\n  - Returns the title of the web page currently viewed.\r\n* `screenshot [REGION]`\r\n  - Take a screenshot of the web page currenly viewed and send base64 encoded JPG.\r\n    If `[REGION]` is given, restrict the screenshot by the given region `(x,y,width,height)`.\r\n\r\n## Content\r\n\r\n* `set_html <string|file> <VALUE>`\r\n  - Sets the content of the web page. If `file` is given, the `VALUE`\r\n    is interpreted as a path to a file to load, otherwise `string` is given,\r\n    the `VALUE` is used to set the content of the web page.\r\n\r\n* `js <string|file> <VALUE>`\r\n  - Run JavaScript code. If `file` is given, the `VALUE` is interpreted as\r\n    a path to a file to load, otherwise `string` is given, the value `VALUE`\r\n    is executed as JavaScript code.\r\n\r\n## Events\r\n\r\n* `subscribe <VALUE>`\r\n  - Subscribe to specified event in `VALUE`.\r\n\r\n### Available events\r\n\r\n* `url_changed`\r\n  - This event is fired when the url chages.\r\n* `title_changed`\r\n  - This event is fired whenever the title changes.\r\n* `load_started`\r\n  - This event is fired when a page starts loading content.\r\n* `load_finished`\r\n  - This event is fired when a load of the page has finished.\r\n* `user_activity <IDLE_TIME>`\r\n  - This event is fired when the user interacts with the input system through\r\n    keystrokes or mouse clicks. The `IDLE_TIME` is the milliseconds since the\r\n    last user activity.\r\n\r\n## Instant WebView\r\n\r\n* `idle_time`\r\n  - Returns the idle time from the last user activity in milliseconds.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}